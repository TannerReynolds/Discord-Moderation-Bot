# Overview of types of values:
# String: Strings are encased in "". Any text or snowflake (Discord ID) is a string and needs to be encased "".
# Number: Numbers are not enclosed in "". They are just numbers and are not interpreted by the bot the same way that strings are.
# Array: Array is just a list of other types. Could be numbers, strings, or objects. each item is separated by a comma. Example: [ "first ID", "second ID" ]
# Object: Objects are, in this case, structures with a key and value pair. Key is the first item, value is the second item. There can also be arrays of objects.
# Boolean: Booleans are just true or false. Do NOT encase them with "". They are meant to just be true or false by themselves.
# This guide can help you create a bot and invite it to your server: https:#discordjs.guide/preparations/setting-up-a-bot-application.html
# This site can help you create an invite link for your bot: https:#discordapi.com/permissions.html
# This bot was coded to only work on servers that are configured here. Do not make your bot public, it will only create errors and break things.
# Make sure you have created a config.js file before running the bot. The bot will not run using only the example.config.js file.

# Follow this guide to create your bot and get it's token/invite it to your server: https://discordjs.guide/preparations/setting-up-a-bot-application.html
token = "."

# The ID of your bot, you can get this from your bot's application page. It will be called "Application ID"
clientId = "ID_HERE"

# Maximum CPU threads the bot should use for it's worker thread pool
cpuThreads = 4
# Main guild of the bot
guildId = "ID_HERE"
# Your user ID
botOwnerID = "ID_HERE"
# The server to direct banned users to so that they can appeal their bans. The reason for this
# is that users cannot run the /appeal command in the bot's DMs unless they share
# at least one server with the bot. I recommend having a server where there are no text channels open to them
# just so they can DM the bot with /appeal
appealServer = "LINK_HERE"

[status]
# Type
type = 3
content = "over everyone"

[colors]
# Must be hex color codes prefixed with a #
success = "#66de98"
error = "#FF6961"
main = "#6C4678"
warning = "#f5f562"

[emojis]
# Emojis for various embeds and reactions
sent = "<:sent:1203188998097604608>"
yes = "<:check:1203191199251300402>"
no = "<:x_:1203191562084032594>"
success = "<:check:1203191199251300402>"
error = "<:x_:1203191562084032594>"
loading = "<a:loading:1206460809623113758>"

# url is currently not necessary, but if you plan on running this bot you should have this enabled.
# Enabling this feature will allow the bot process monitor to keep watch over your bot and recieve heartbeats from it.
# This means that if your bot ever stops responding, the monitor can restart your bot and you will experience no more
# than 10-15 seconds of downtime at most.
[server]
enabled = true
PORT = 1746
url = "https://learn.tokyo.jp/fern"

# IMPORTANT: Once you're done setting this file up, ensure you also do your guild configs, located in the 'guilds' folder.
# Copy the "blank.toml" file and paste it. Rename it to the name of your guild, then fill out the information inside.
# Do this for every single guild you want the bot to be in. Each guild should have it's own toml file by the end.
# When done, open the root folder where "package.json" is located and run the command "npm run generateConf"
#
# Do not start the processes yourself. Please use the commands premade for you in package.json
# Run "npm run setup" to install and check for dependencies.
# Test out the bot to make sure it works by running "npm run test". This will also deploy
# the commands, and create a migration for your database based on the schema.
# Once you've confirmed everything works as intended, run the bot in production mode
# by running the command "npm run production"
